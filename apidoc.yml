openapi: '3.0.2'
info:
  title: API Title
  version: '1.0'
  description: API Description with a lot of text
  contact:
    name: API Support
    url: 'https://example.com/support'
    email: uno@cualquiera.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: http://localhost:8080/api/v1
  - url: https://api.example.com/api/v1
tags:
  - name: books
    description: Operations about books
paths:
  /books:
    get:
      summary: Get all books
      operationId: getBooks
      tags:
        - books
      parameters:
        - name: author
          in: query
          description: find books by author
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Returns all books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookResponse'
        '400':
          description: No books found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error400'
    post:
      summary: Create a book
      operationId: createBook
      tags:
        - books
      requestBody:
        description: Book object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequest'
      responses:
        '201':
          description: Book created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorIsbn'
    put:
      summary: Update a book
      operationId: updateBook
      tags:
        - books
      requestBody:
        description: Book object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookResponse'
      responses:
        '200':
          description: Book updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponse'
        '409':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error409'
  /books/{id}:
    delete:
      summary: Delete all books
      operationId: deleteBooks
      tags:
        - books
      parameters:
        - name: id
          in: path
          description: id of book to delete
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '204':
          description: No content
        '404':
          description: Book not found
components:
  schemas:
    BookResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: The Lord of the Rings
        author:
          type: string
          example: J.R.R. Tolkien
        description:
          type: string
          example: A book about a ring
        isbn:
          type: string
          example: 978-3-16-148410-0
        pages:
          type: integer
          format: int32
          example: 1216
    BookRequest:
      type: object
      properties:
        title:
          type: string
          example: The Lord of the Rings
        author:
          type: string
          example: J.R.R. Tolkien
        description:
          type: string
          example: A book about a ring
        isbn:
          type: string
          example: 978-3-16-148410-0
        pages:
          type: integer
          format: int32
          example: 1216
    error500:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 500
        message:
          type: string
          example: Internal server error
    error400:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 400
        message:
          type: string
          example: Bad request
    error404:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 404
        message:
          type: string
          example: Not found
    errorIsbn:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 400
        message:
          type: string
          example: Book already exists with isbn 978-3-16-148410-0
    error409:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 409
        message:
          type: string
          example: Book already exists with id 1
        

